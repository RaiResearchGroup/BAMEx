BAMEx – the Behavioral Activation Modeling Experimental frameworkThank you for your interest in BAMEx. If your use of BAMEx results in a publication, please cite as follows: Rai Group. (2018). BAMEx: the Behavioral Adoption Modeling Experimental framework. Version 0.2. [Computer Software].Changes from v0.1 to v0.2Features:Training routine: Parameter blast + GA Error minimizationFixes:Better parameter logging (now logs parameters of type “list”)Less artificial TOY data (non-uniform geographical distribution, more interesting emergence)This project is in a pre-release state. We are actively developing it. If you find something that needs our attention, please send a message to BAMEx.devs@gmail.com. Your feedback and input is extremely valuable. Thank you!This file is a readme for getting started using BAMEx. This version of BAMEx implements the Solar Energy Consumer Adoption Decision (SECAD) agent-based model of residential solar photovoltaic diffusion in Austin, Texas, USA described in Rai and Robinson (2015) and Robinson and Rai (2015). The article explains the theoretical aspects of the model and describes its function. This readme references the article on several occasions.  This file contains:	Concept and scheduling overview      Software setup and requirements	File and folder structure overview      File and folder details      Getting started      ReferencesThis version is bundled with “toy” data. These data are meant to help explore the framework, and to serve as a guide as users replace the toy data with actual data relevant to a specific project. This model is an entire modular experimental framework designed to go further than the model specified in the articles. Modules can be created and added to the model to enhance or modify the functionality of the model. The code is written so that new users can quickly input their own modifications (within modules) without impacting the core model, allowing users to pursue unique experiments within the model. Modules can also be toggled on or off so that each run of the model can use a different configuration. You are encouraged to apply this model and framework to new data and settings. We would appreciate hearing about novel applications!Concept and scheduling overviewThe main contribution of this framework is to provide a systematic and flexible way to implement changes to a base model. We use some specific terms throughout this document and the code as follows:Batch: A collections of runs that share the same initializationInitialization: The code that sets the initial conditions for a modelModel: A specific combination of parameter settings and modulesModule: A section of code – usually one function – that can be suppressed or enabled at willRecipe: A specific combination of modules that constitute a modelRun: One iteration from initial conditions to the end of a modelRuntime: The code that implements a particular agent-based rulesetStaging: The code that re-expresses initial conditions as vectors in preparation for runtimeWhen executed, the code iterates through batches, then runs, generally following the following process. For example, for 2 batches of 2 runs of a model with the recipe “Initialization module A, Staging module B, then Runtime module B” the process is:   Batch 1      Initialization module A      Run 1 - 1      Staging module B      Runtime module B      Run 1 - 2      Staging module B      Runtime module BBatch 2      Initialization module A      Run 2 - 1      Staging module B      Runtime module B      Run 2 - 2      Staging module B      Runtime module BWrite out reports EndSoftware requirements and setupThis project is scripted in the R programming language. It is verified to work on R version 3.3.1, and it requires the following packages: fastmatchlubridateggplot2It is designed to run as a script called from the command line as an argument to ‘Rscript’ eg: > Rscript BAMEx_exe_run.RSome operations require passing additional command line arguments through Rscript, but basic functionality is possible through Rstudio (a popular GUI for R). If you choose to use this software through Rstudio, complete the following: 1. Set the working directory in BAMEx_exe_run.RUncomment the line #setwd("<path to working directory>")Provide the path to your working directory2. Remove the terminating q() from BAMEx_exe_run.RIn the last line of BAMEx_exe_run.R, comment out q()I.e. change “q()” to “#q()”File and folder structure overview-BAMEx_v0.1 |-README.docx |-BAMEx_exe_run.R |-BAMEx_exe_analytics.R |-BAMEx_exe_geoanalytics.R |-BAMEx_func_core.R |-BAMEx_func_init.R |-BAMEx_func_support.R |-inputs | 	|-TOYAgents.csv | 	|-TOYGeoNeiDF.Rdata | 	|-TOYSecadEcon.csv |-outputs | 	|-AdoptionOuts_BAMEx_Regular_1012224001_jobNA.csv | 	|-QuarterOuts_BAMEx_Regular_1012224001_jobNA.csv | 	|-RunOuts_BAMEx_Regular_1012224001_jobNA.csv | 	|-SocNet_BAMEx_Regular_1012224001_b1_jobNA.Rdata | 	|-SocNet_BAMEx_Regular_1012224001_b2_jobNA.Rdata |-runlogs | 	|-Log_BAMEx_Regular_1012224001_jobNA.txt | 	|-ParamLog_BAMEx_Regular_1012224001_jobNA.csv |-analytics  	|-BAMEx_Errors_1012224001.csv  	|-graphics   		|-BAMEx_CumAdopts_1012224001.png      |-BAMEx_MapSimDens_1012224001.png      |-BAMEx_MapSimDensDiff_1012224001.pngFile and folder detailsREADME.docxThis fileBAMEx_exe_run.RThis file has three parts that require setting up prior to running the model:       1) tracking runs of the model      2) setting parameter values,       3) setting up the “recipe” that defines which modules are included in a particular run.1. Tracking Runs in commented texta. Using the model numbering convention, specify a unique identifier for your model. This code will be used to identify the model throuhout. b. For each run copy the unique model number into params$Model. c. Ensure that the Identification parameters: batches, runs, quarters etc… match your model number. 2. Setting parameter values in a “params” dataframea. The params dataframe declares the parameter values within the model. Parameters are used to calculate each agents attitudinal and economic “activation”, using the process described in Rai & Robinson (2015). 3. Setting up the “recipe”a. The code is written in a modular fashion. It allows the user to turn certain modules on or off to define how the model is runb. This design also allows users to add external modules (additional functionality) to the model that can be called in the ModABM_exe_run.R code.c. The current modules are set in the params dataframe, e.g params$AgentInitMod. Exe_run calls both init and core, in that order. One line description of init and coreAnalytics follows exe_run.Debug and support is in/out depending on modeler to use it. BAMEx_exe_analytics.RThis file generates two analytics outputs for the model. The primary output is a graphical display of the cumulative PV system adoptions across the duration of your model. The other output file is a summary of the MSE of each of the model outputs. The outputs for analytics runs are saved in the analytics folder. To run the analytics file, set the CompareModelNumber variable to identify the model number that you wish to analyze. You may also provide a description of the model in CompareDescription. These require you to update the number of quarters you want to run the analytics over and the unique model number you want to analyze. BAMEx_exe_geoanalytics.RThis file generates two maps: 1) a predicted adoption density for the specified model, 2) the difference in densities between the specified model and the empirical. To run the geoanalytics file, set the CompareModelNumber variable to identify the model number that you wish to analyze. You may also provide a description of the model in CompareDescription. These require you to update the number of quarters you want to run the analytics over and the unique model number you want to analyze. ModABM_func_core.RThis file contains the function that control the running of the model after the initialization. This file describes the iterative calculation of each agents economic and attitudinal activation. The chart below summarizes the process (Rai and Robinson 2015). A full description of this process is detailed in Rai and Robinson (2015).Unless the user wants to modify the model routine, no changes to the ModABM_func_core.R file are necessary to run the model. This file is called within the ModABM_exe_run.R routine. ModABM_func_init.RThe purpose of the initialization code is to generate the objects that the run file uses. These objects describe the agent states at time t=0. This anchors the model in an empirical time series (starting 01/01/2008). The initial agents states describe each agents economic and attitudinal metrics. Unless the user wants to modify the initialization routine, no changes to the initialization ModABM_func_init.R file are necessary to run the model. This file is called within the ModABM_exe_run.R routineModABM_func_support.RThis file contains the debugging routine for the model. Unless the user wants to modify the debug routine, no changes to the initialization ModABM_func_support.R file are necessary to run the model. This file is called within the ModABM_exe_run.R routineThis is also a place to call additional packages as necessary for future modules.Input FolderThis folder contains input data used in the ABM. These data also represent the empirical reality. They are used to train models and to compare outputs to an empirical baseline.TOYAgents.csv Comma separated variable spreadsheet with:      Column A: WGSlng - longitude coordinate of agent      Column B: WGSlat - latitude coordinate of agent      Column C: agentIndex - unique agent number      Column D: SIA - agents assigned attitudinal attribute      Column E: U - agents attitudinal uncertainty      Column F:  PBC_scale - agents perceived behavioral control (scaled)      Column G: PBC_raw - agents perceived behavioral control (raw)      Column H: HomeValue - agents home value      Column I: radMEANft - measure of solar irradiance      Column J: AdoptDate - date that agent adopted solar (if adopted prior to model run)TOYGeoNeiDF.Rdata R data file containing a dataframe with: Column 1: Serial number (You have no influence on this)Column 2: agentIndexColumn 3: GeoNei- representing the vector of connections possessed by each agentColumn 4: Geok- Number of elements in GeoNeiCloumn 5: kLoclas- Number of elements in LocalAgentIndexColumn 6: LocalAgentIndex- the social neighbors after homophily by wealth constraint, but before random rewiringTOYSecadEcon.csvComma separated variable spreadsheet with:Column A: PriceLoess - The per unit price of a solar system calculated using LOESS model. See Rai & Robinson (2015) for more information. Column B: Tick (also Quarter) -tick is the same as a quarter – the name should be changed to quarterColumn C: Price SD -Standard deviation of priceLoessColumn D: Rebate_d - The utility rebate for solar purchaseColumn E: Elec_VOC - Value of electricity produced by solar system. Output FolderThis folder contains the output files generated by the model. You can select which output files you want to generate when setting up the model.AdoptionOuts_BAMEx_<model specific code>.csvComma separated variable spreadsheet summarizes the results of the model for each quarter with:Column A: timecode – batch, run, quarter, and step of the adoptionColumn B: AgentID- Unique identifier of the adopter agentColumn C: AdoptLat - latitude coordinate of agent Column D: AdoptLong - longitude coordinate of agentColumn E: sia – Attitude at time of adoptionColumn F: u – uncertainty at time of adoptionColumn G: pp – payback at time of adoptionColumn H: pbc – perceived behavioral control of agent QuarterOuts_BAMEx_<model specific code>.csvComma separated variable spreadsheet summarizes the results of the model for each quarter with:Column A: ModelType- Not yet implementedColumn B: ModelNum- Unique model numberColumn C: Runtime- Model type you ranColumn D: subModelD- Identifies the batch and run number (Batch: Run)Column E: Quarter- Number of quarters (quarter years) the model was run for.Column F: CumulAdopts- Cumulative AdoptionsColumn G: NewAdopts- New AdoptionsColumn H: EconActivated- Amount of economically activated agentsColumn I: AttActivated- Amount of attitudinally activated agentsColumn J: EmpGrowRate- Growth rate of adoptionsRunOuts_BAMEx_<model specific code>.csvComma separated variable spreadsheet summarizes the results of the model for each run (summation of quarters in the run.) with:Column A: ModelType- Not yet implementedColumn B: ModelNum- Unique model numberColumn C: Runtime- Model type you ranColumn D: Batch – Batch numberColumn E: Run – Run numberColumn F: subModelD- Identifies the batch and run number (Batch: Run)Column G: TotalAdopts- Total adoptions for the model run. SocNet_BAMEx_<model and batch specific code>.RdataR data file containing a dataframe that describes the final social network with:Column 1: Serial number (You have no influence on this)Column 2: agentIndexColumn 3: Alters- The actual connections for each agent after the random rewiring (see Rai and Robinson 2015)Runlogs FolderEach run of the model will generate a unique parameter log and text file log of the model run.ParamLog_BAMEx_<model specific code>.csvThe parameter log file keeps track of each of the parameters you chose for each model run. For full explanation of each of the parameters refer to Rai & Robinson (2015).Log_BAMEx_<model specific code>.txtThe text file log outputs a summary of the results for each time step in the model run. Analytics FolderThe outputs for analytics runs are saved in the analytics folder. BAMEx_Errors<model specific code>.csvComma separated variable spreadsheet summary of the mean square error (MSE) of each of the model outputs with: Column A: ModelNum- Unique model numberColumn B: CumulAdoptsMSE- Cumulative Adoptions MSEColumn C: NewAdoptsMSE- New AdoptionsColumn D: EmpGrowRateMSE- Growth rate of adoptions MSEColumn E: CumulAdoptsRMSE- Cumulative Adoptions RMSEColumn F: NewAdoptsRMSE- New Adoptions RMSEColumn G: EmpGrowRateRMSE- Growth rate of adoptions RMSEGraphics subFolderThe output is a graphical display of the cumulative PV system adoption density across the duration of your model. BAMEx_CumAdopts<model specific code>.pngA graphic comparing the cumulative adoption curve between the specified model and the empirical. BAMEx_MapSimDens<model specific code>.pngA graphic showing the predicted adoption density of the specified model. BAMEx_ MapSimDensDiff<model specific code>.pngA graphic comparing the predicted adoption density of the specified model to the empirical adoption desnity. Getting Started1. Unzip the ABM model folder. When unzipped you should have access to the following files/ The contents of each file are outlined in section 2 of this readme document.2. Open the ModABM_exe_run.R file. This is primary R file you will use to run the ABM model.3. On line 11 of the code is a command to set your working directory. Copy in the directory path for the unzipped ABM folder. 4. The next step is to create unique model numbers for your work according to the numbering convention detailed in the code. See code lines 13-24 for explanation on how to do this.5. For each run you should have a unique number that you generate. All the output/log/analytics files you generate for this run will be assigned that unique run number.  6. Before each run of the model make sure the model number on line 38 of the code has been updated to reflect the correct number for your run. 7. You may need to install the following packages to get all model functions to run properly. “lubridate”“ggplot2”“fastmatch”To install packages on RStudio, go to -> Tools then select the install packages option. 8. Before running the code check line 184 of the code. If there is a “q()” on the last line of the code, you will need to delete it. The code will not run if this command remains. Remove q() so this line will just go. ReferencesRai, V., Robinson, S.A., 2015. Agent-Based Modeling of Energy Technology Adoption: Empirical Integration of Social, Behavioral, Economic, and Environmental Factors. Environ. Model. Softw. 70, 163–177. doi:10.1016/j.envsoft.2015.04.014Robinson, S.A., Rai, V., 2015. Determinants of Spatio-Temporal Patterns of Energy Technology Adoption: An Agent-Based Modeling Approach. Appl. Energy 151C, 273–284.